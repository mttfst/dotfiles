set path+=**
set wildmenu

" Tab options
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent

" split settings
set splitright
set splitbelow

" Line numbers
set number relativenumber

" source project vimrc's
set exrc

" search results don't stay highlighted
set nohlsearch

" keep buffers open
set hidden

set noerrorbells

" case sensitive search when a cap letter is used
set smartcase

" history
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile

" highlight on searching
set incsearch

" start scroll before last line
set scrolloff=8

" decrease update time (suggestion from vimtricks for fluent git gutter)
" default = 4000
set updatetime=1000

" extra column on the left for signals from whatever
set signcolumn=yes

" spell settings
set spelllang=en_gb
set complete+=kspell
hi SpellBad   ctermbg=none cterm=underline ctermfg=203 " guifg=#ff5f5f
hi SpellLocal ctermbg=none cterm=underline ctermfg=303 guifg=#ff5f5f
hi SpellRare  ctermbg=none cterm=underline " ctermfg=203 guifg=#ff5f5f
hi SpellCap   ctermbg=none cterm=underline " ctermfg=203 guifg=#ff5f5f

" Declare the list of plugins.
call plug#begin('~/.vim/plugged')

Plug 'lervag/vimtex'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'tpope/vim-commentary'

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'

Plug 'mbbill/undotree'

Plug 'ajh17/VimCompletesMe'

call plug#end()


" remaps
let mapleader = " "

"navigation between screens
map <leader>h :wincmd h<CR>
map <leader>j :wincmd j<CR>
map <leader>k :wincmd k<CR>
map <leader>l :wincmd l<CR>
" resize window"
nnoremap <Leader>+ :vertical resize +5<CR>
nnoremap <Leader>- :vertical resize -5<CR>

" move split windows"
nnoremap <Leader>wh <C-w>H
nnoremap <Leader>wj <C-w>J
nnoremap <Leader>wk <C-w>K
nnoremap <Leader>wl <C-w>L

" move lines up and down in visual"
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" In insert or command mode, move normally by using Ctrl
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>

" undotree settings"
nnoremap <leader>u :UndotreeToggle<CR>


" VimTex settings"
nnoremap <leader>toc :VimtexTocToggle <CR> :wincmd h <CR>
nnoremap <leader>tv :VimtexView <CR>
nnoremap <leader>tc :VimtexCompile <CR>
let g:vimtex_view_method = 'skim'
let g:vimtex_compiler_progname='nvr'
let g:vimtex_grammar_textidote = {
            \ 'jar': '~/.vim/textiode/textidote.jar',
            \ 'args': '--output singleline --check en_UK',
            \}


" source vimrc"
nnoremap <leader>svrc :source ~/.config/nvim/init.vim <CR>
" open vimrc
nnoremap <leader>vrc :e ~/.config/nvim/init.vim <cr>

" fix spelling errors
function! FixLastSpellingError(np)
   if a:np == 'p'
      normal! mm[s1z=`m"
      echom a:np
  elseif a:np == 'n'
      normal! ]s1z=
      echom a:np
  endif
endfunction
nnoremap <leader>sp :call FixLastSpellingError('p')<cr>
nnoremap <leader>sn :call FixLastSpellingError('n')<cr>

nnoremap <leader>sc ea<C-X><C-S>

" telescope settings"
nnoremap <leader>ps :lua require('telescope.builtin').grep_string({ search = vim.fn.input("Grep For > ")})<CR>
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>fv <cmd>Telescope grep_string<cr>



" toggle to absolute numbers in insert mode
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" remove white spaces
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

augroup whitespace
  autocmd!
  autocmd BufWritePre * :call TrimWhitespace()
augroup END


" highlight yanked lines a seconds"
augroup highlight_yank
    autocmd!
    autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank({timeout = 1000})
augroup END



function! SetServerName()
  if has('win32')
    let nvim_server_file = $TEMP . "/curnvimserver.txt"
  else
    let nvim_server_file = "/tmp/curnvimserver.txt"
  endif
  let cmd = printf("echo %s > %s", v:servername, nvim_server_file)
  call system(cmd)
endfunction

augroup vimtex_common
    autocmd!
    autocmd FileType tex call SetServerName()
augroup END


augroup VimCompletesMeTex
  autocmd!
  autocmd FileType tex
      \ let b:vcm_omni_pattern = g:vimtex#re#neocomplete
augroup END

" no new line when hit enter in completion list"
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

augroup filestypes
  autocmd!

  autocmd BufNewFile,BufRead *.css.erb,*.spriter setfiletype css
  autocmd BufNewFile,BufRead *.mkd,*.md,*.markdown setfiletype markdown
  autocmd BufNewFile,BufRead *.json setfiletype javascript
  autocmd BufNewFile,BufRead *.ejs,*.hbs setfiletype html

  autocmd Filetype python setlocal tabstop=4 softtabstop=4 shiftwidth=4
  autocmd Filetype make,automake setlocal noexpandtab

  autocmd Filetype markdown,tex setlocal spell textwidth=80
  autocmd Filetype gitcommit,mail setlocal spell textwidth=76 colorcolumn=77
augroup END
